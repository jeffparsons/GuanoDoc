@parser html_doc
@parser duck_breeder
@parser duck_hunter
@parser image_embed
@parser htmlify_inline_code
This is a sample GuanoDoc document.

# This is a comment and should not affect the output in any way.

This is another line. There should be two blank lines between this and the first line.

# Change the parser.
@parser block_quoter
These lines will be indented
and prefixed with the '>' character
# Comments don't have the same meaning here.
# But the `block_parser' parser will pop itself
# off the parser stack if it finds a '<'.
<

Now we're back to normal.

This time our alternative parser won't have
its own escape command. Instead we're going
to choose what input to feed it.

@parser dumb_block_quoter until the fat lady sings
These lines will be indented, too, but dumb_block_quoter
isn't responsible for returning control; it is only fed
a substring of the input.
the fat lady sings

Now we're back to normal again.

@parser markdown until I feel like it
This section should become HTML
===============================

That's because it's getting fed through a Markdown parser.
Isn't that exciting?
I feel like it

Aaaaand we're back to normal again.

But in case that's too normal for you, here's a duck:
<pre>
{duck}
</pre>

These say <em>duckling</em> (not <em>duck</em>) in the source, but a filter
intercepts them and turns them into ducks:
<pre>
{duckling}
QUACK!
{duckling}
</pre>

Here's an embedded HTML image!
{img:sample_image.jpg}

Here's some code:
@{
print('Hello!')
a=4
if a == 4:
	print(a)
}
And the code is done.
